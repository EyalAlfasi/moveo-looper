{"version":3,"sources":["assets/img/icons/microphone.svg","assets/sounds sync /^/.*$","assets/sounds/120_future_funk_beats_25.mp3","assets/sounds/120_stutter_breakbeats_16.mp3","assets/sounds/Bass_Warwick_heavy_funk_groove_on_E_120_BPM.mp3","assets/sounds/FUD_120_StompySlosh.mp3","assets/sounds/GrooveB_120bpm_Tanggu.mp3","assets/sounds/MazePolitics_120_Perc.mp3","assets/sounds/PAS3GROOVE1.03B.mp3","assets/sounds/SilentStar_120_Em_OrganSynth.mp3","assets/sounds/electric_guitar_coutry_slide_120bpm-B.mp3","assets/img/icons lazy /^/.*/.svg$/ groupOptions: {} namespace object","components/Footer.jsx","services/storageService.js","store/reducers/recordingsReducer.js","store/actions/recordingsActions.js","components/RecordingPreview.jsx","components/RecordingsList.jsx","components/Header.jsx","services/soundService.js","store/reducers/soundsReducer.js","store/actions/soundsActions.js","components/PadPreview.jsx","components/PadsList.jsx","services/utilService.js","pages/LooperApp.jsx","App.jsx","reportWebVitals.js","store/store.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","webpackAsyncContext","Promise","then","ids","all","slice","_Footer","onToggleLoopPause","onResetAll","onPlayAllSounds","onStartRecording","onStopRecording","isLooperRunning","useSelector","state","soundsReducer","className","onClick","Footer","React","memo","storageService","query","put","key","value","entities","push","localStorage","setItem","JSON","stringify","parse","getItem","SET_RECORDINGS","SAVE_RECORDING","initialState","recordings","RECORDINGS_DB","RecordingPreview","recording","idx","useState","isPlaying","setIsPlaying","cycleIdx","setCycleIdx","cycleTime","setCycleTime","cycleIntervalRef","useRef","currentCycleSounds","useMemo","orderOfSounds","useEffect","current","setInterval","prevTime","clearInterval","prev","length","document","querySelectorAll","_id","forEach","audioEl","load","loop","play","pause","currentTime","sound","file","require","fileName","src","default","type","RecordingsList","isOpen","setIsOpen","dispatch","useDispatch","recordingsReducer","savedRecordings","loadRecordings","style","transform","microphone","alt","_Header","Header","sounds","name","iconName","soundService","getSounds","LOAD_SOUNDS","QUEUE_SOUND","PLAY_SOUNDS_IN_QUEUE","TOGGLE_LOOP_PAUSE","PLAY_ALL_SOUNDS","STOP_ALL_SOUNDS","RESET_LOOPER","queue","activeSoundsCount","toggleLoopPause","PadPreview","currentLoopTime","Icon","setIcon","audioRef","initializeIcon","useCallback","a","importedIcon","Audio","isPending","pendingBarHeight","Math","floor","soundId","height","PadsList","utilService","makeId","text","possible","i","charAt","random","LooperApp","loopTimeIntervalRef","setCurrentLoopTime","isRecording","setIsRecording","recordedSession","setRecordedSession","loadSounds","playedSounds","filter","savedRecording","saveRecording","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","combineReducers","action","currentSound","find","queueCopy","assign","store","createStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e1d750d7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/microphone.b2124a1d.svg\";","var map = {\n\t\"./120_future_funk_beats_25.mp3\": 28,\n\t\"./120_stutter_breakbeats_16.mp3\": 29,\n\t\"./Bass_Warwick_heavy_funk_groove_on_E_120_BPM.mp3\": 30,\n\t\"./FUD_120_StompySlosh.mp3\": 31,\n\t\"./GrooveB_120bpm_Tanggu.mp3\": 32,\n\t\"./MazePolitics_120_Perc.mp3\": 33,\n\t\"./PAS3GROOVE1.03B.mp3\": 34,\n\t\"./SilentStar_120_Em_OrganSynth.mp3\": 35,\n\t\"./electric_guitar_coutry_slide_120bpm-B.mp3\": 36\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 16;","export default __webpack_public_path__ + \"static/media/120_future_funk_beats_25.5eb417fc.mp3\";","export default __webpack_public_path__ + \"static/media/120_stutter_breakbeats_16.37c82282.mp3\";","export default __webpack_public_path__ + \"static/media/Bass_Warwick_heavy_funk_groove_on_E_120_BPM.52c24c81.mp3\";","export default __webpack_public_path__ + \"static/media/FUD_120_StompySlosh.27bdc145.mp3\";","export default __webpack_public_path__ + \"static/media/GrooveB_120bpm_Tanggu.3e1411b4.mp3\";","export default __webpack_public_path__ + \"static/media/MazePolitics_120_Perc.2d08c654.mp3\";","export default __webpack_public_path__ + \"static/media/PAS3GROOVE1.03B.f77c6da4.mp3\";","export default __webpack_public_path__ + \"static/media/SilentStar_120_Em_OrganSynth.f2d668af.mp3\";","export default __webpack_public_path__ + \"static/media/electric_guitar_coutry_slide_120bpm-B.230fcab8.mp3\";","var map = {\n\t\"./bass-guitar.svg\": [\n\t\t40,\n\t\t4\n\t],\n\t\"./bongo.svg\": [\n\t\t41,\n\t\t5\n\t],\n\t\"./conga.svg\": [\n\t\t42,\n\t\t6\n\t],\n\t\"./dj.svg\": [\n\t\t43,\n\t\t7\n\t],\n\t\"./drum-set.svg\": [\n\t\t44,\n\t\t8\n\t],\n\t\"./electric-guitar.svg\": [\n\t\t45,\n\t\t9\n\t],\n\t\"./keyboard.svg\": [\n\t\t46,\n\t\t10\n\t],\n\t\"./microphone.svg\": [\n\t\t12\n\t],\n\t\"./music-notes.svg\": [\n\t\t47,\n\t\t11\n\t],\n\t\"./saxophone.svg\": [\n\t\t48,\n\t\t12\n\t],\n\t\"./sound-bars.svg\": [\n\t\t49,\n\t\t13\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 38;\nmodule.exports = webpackAsyncContext;","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst _Footer = ({ onToggleLoopPause, onResetAll, onPlayAllSounds, onStartRecording, onStopRecording }) => {\r\n    //All footer controlles come from the parent component\r\n\r\n    const isLooperRunning = useSelector(state => state.soundsReducer.isLooperRunning)\r\n\r\n    return (\r\n        <div className=\"footer-wrapper flex column justify-center align-center\">\r\n            <span\r\n                onClick={onPlayAllSounds}\r\n            > Play all sounds</span>\r\n            <div >\r\n                <i\r\n                    onClick={onToggleLoopPause}\r\n                    className={`icon-button fa ${!isLooperRunning ? 'fa-play' : 'fa-pause'}`}\r\n                ></i>\r\n                <i\r\n                    onClick={onResetAll}\r\n                    className=\"icon-button fa fa-square\"\r\n                ></i>\r\n\r\n                <i\r\n                    onClick={onStartRecording}\r\n                    className=\"icon-button fa fa-microphone\"\r\n                ></i>\r\n                <i\r\n                    onClick={onStopRecording}\r\n                    className=\"icon-button fa fa-microphone-slash\"\r\n                ></i>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Footer = React.memo(_Footer)","export const storageService = {\r\n    query,\r\n    put\r\n}\r\n\r\nfunction query(key) {\r\n    const entities = JSON.parse(localStorage.getItem(key)) || []\r\n    return entities\r\n}\r\n\r\nfunction put(key, value) {\r\n    const entities = query(key)\r\n    entities.push(value)\r\n    localStorage.setItem(key, JSON.stringify(entities))\r\n    return value\r\n}\r\n\r\n\r\n","export const SET_RECORDINGS = 'SET_RECORDINGS';\r\nexport const SAVE_RECORDING = 'SAVE_RECORDING';\r\n\r\nconst initialState = {\r\n    recordings: []\r\n}\r\nexport const recordingsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_RECORDINGS:\r\n            return { ...state, recordings: [...action.recordings] }\r\n        case SAVE_RECORDING:\r\n            return { ...state, recordings: [...state.recordings, action.recording] }\r\n        default:\r\n            return state\r\n    }\r\n}","import { storageService } from \"../../services/storageService\";\r\nimport { SAVE_RECORDING, SET_RECORDINGS } from \"../reducers/recordingsReducer\";\r\nconst RECORDINGS_DB = 'RECORDINGS_DB'\r\n\r\nexport function loadRecordings() {\r\n    const savedRecordings = storageService.query(RECORDINGS_DB) // Getting recordings from local storage and then updating store\r\n    const action = {\r\n        type: SET_RECORDINGS,\r\n        recordings: savedRecordings\r\n    }\r\n    return action\r\n}\r\nexport function saveRecording(recording) {\r\n    const savedRecording = storageService.put(RECORDINGS_DB, recording) // Save to local storage before updating store\r\n    const action = {\r\n        type: SAVE_RECORDING,\r\n        recording: savedRecording\r\n    }\r\n    return action\r\n}","import React, { useEffect, useMemo, useRef, useState } from 'react'\r\n\r\nexport const RecordingPreview = ({ recording, idx }) => {// Gets recording item and item number (index in the array)\r\n\r\n\r\n    const [isPlaying, setIsPlaying] = useState(false) // Boolean state for playing audio\r\n    const [cycleIdx, setCycleIdx] = useState(0) // Every recording is an array of cycles, each cycle is an array of sounds\r\n    const [cycleTime, setCycleTime] = useState(0) // A timer state running from 0 to 8 seconds (in milliseconds)\r\n    const cycleIntervalRef = useRef(null) //Using ref for saving the cycleTime interval id so it wont get lost on re-render\r\n\r\n    const currentCycleSounds = useMemo(() => { // returns a memoized array of the current cycle sounds by the cycle index\r\n        return recording.orderOfSounds[cycleIdx]\r\n    }, [cycleIdx, recording.orderOfSounds])\r\n\r\n    useEffect(() => {\r\n        if (isPlaying) { // If the recording is playing, then set an interval that updates \r\n            //the current time on the cycleTime state\r\n            cycleIntervalRef.current = setInterval(() => {\r\n                setCycleTime((prevTime) => (prevTime + 10) % 8000)\r\n            }, 10);\r\n        } else {\r\n            clearInterval(cycleIntervalRef.current)\r\n            setCycleTime(0)\r\n            setCycleIdx(0)\r\n        }\r\n    }, [isPlaying])\r\n\r\n    useEffect(() => { // When we reach to the last cycle of the recording, go back to the first cycle\r\n        if (cycleTime >= 7990) {\r\n            setCycleIdx((prev) => {\r\n                return prev === recording.orderOfSounds.length - 1 ? 0 : prev + 1\r\n            })\r\n        }\r\n    }, [cycleTime, recording.orderOfSounds.length])\r\n\r\n    useEffect(() => {// Captures all audio elements that belong to this recording (and current cycle)\r\n        // (there are also other recordings and audio elements in the dom so I gave a uniqe className)\r\n        // and based on the \"isPlaying\" state, play or pause them\r\n        const audioElements = document.querySelectorAll(`.audio_${recording._id}`)\r\n        audioElements.forEach(audioEl => {\r\n            if (isPlaying) {\r\n                audioEl.load()\r\n                audioEl.loop = true\r\n                audioEl.play()\r\n            } else {\r\n                audioEl.pause()\r\n                audioEl.currentTime = 0\r\n            }\r\n        })\r\n    }, [isPlaying, cycleIdx, recording._id])\r\n\r\n    return (\r\n        <div className=\"recording-preview-wrapper flex align-center space-between\">\r\n            <h3>Recording {idx}</h3>\r\n            <i\r\n                onClick={() => setIsPlaying(prev => !prev)}\r\n                className={`icon-button fa ${!isPlaying ? 'fa-play' : 'fa-pause'}`}\r\n            ></i>\r\n            {\r\n                currentCycleSounds.map((sound, idx) => { // Render the current cycle's sounds\r\n                    const file = require(`../assets/sounds/${sound.fileName}`)\r\n                    return <audio className={`audio_${recording._id}`} key={idx}>\r\n                        <source src={file.default} type=\"audio/mpeg\" />\r\n                    </audio>\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport microphone from '../assets/img/icons/microphone.svg'\r\nimport { loadRecordings } from '../store/actions/recordingsActions'\r\nimport { RecordingPreview } from './RecordingPreview'\r\n\r\nexport const RecordingsList = () => {\r\n    const [isOpen, setIsOpen] = useState(false) // Boolean state for recordings list drawer\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const recordings = useSelector(state => state.recordingsReducer.recordings) // Importing the recordings from global state\r\n\r\n    useEffect(() => {\r\n        dispatch(loadRecordings()) // Load recordings from local storage to global state (Redux store)\r\n    }, [dispatch])\r\n\r\n\r\n    return (\r\n        <>\r\n            <span className=\"open-recordings-btn-container relative\">\r\n                {!!recordings.length &&\r\n                    <span className=\"badge\">\r\n                        {recordings.length}\r\n                    </span>}\r\n                <button\r\n                    className=\"open-recordings-btn\"\r\n                    onClick={() => setIsOpen(!isOpen)}>Recordings</button>\r\n            </span>\r\n            {isOpen && <div\r\n                className=\"dark-overlay\"\r\n                onClick={() => setIsOpen(false)}\r\n            ></div>}\r\n            <div\r\n                className={`recordings-wrapper`}\r\n                style={{ transform: `translateX(${isOpen ? \"0\" : \"100%\"}` }}>\r\n                <div className=\"close-recordings-section\">\r\n                    <i\r\n                        className=\"fa fa-arrow-left\"\r\n                        onClick={() => setIsOpen(false)}\r\n                    ></i>\r\n                </div>\r\n                <h2 className=\"recordings-list-title\">My recordings</h2>\r\n                {!recordings.length ?\r\n                    <div className=\"no-recordings-section\">\r\n                        <img src={microphone} alt=\"microphon icon\"/>\r\n                        <h4>Nothing here... <br /> Record your first session!</h4>\r\n                    </div>\r\n                    : recordings.map((recording, idx) => {\r\n                        return <RecordingPreview\r\n                            key={recording._id}\r\n                            recording={recording}\r\n                            idx={idx + 1}\r\n                        />\r\n                    })}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { RecordingsList } from './RecordingsList'\r\n\r\nconst _Header = () => {\r\n    return (\r\n        <header className=\"app-header-wrapper main-header-layout\">\r\n            <div className=\"logo flex column\">\r\n                <span>Moveo</span>\r\n                <span>Looper</span>\r\n            </div>\r\n            <RecordingsList />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport const Header = React.memo(_Header)","const sounds = [\r\n    {\r\n        _id: 1,\r\n        name: 'Sound 1',\r\n        fileName: '120_future_funk_beats_25.mp3',\r\n        iconName: 'sound-bars',\r\n        isPlaying: false,\r\n    },\r\n    {\r\n        _id: 2,\r\n        name: 'Sound 2',\r\n        fileName: '120_stutter_breakbeats_16.mp3',\r\n        iconName: 'music-notes',\r\n        isPlaying: false,\r\n    },\r\n    {\r\n        _id: 3,\r\n        name: 'Sound 3',\r\n        fileName: 'Bass_Warwick_heavy_funk_groove_on_E_120_BPM.mp3',\r\n        iconName: 'bass-guitar',\r\n        isPlaying: false,\r\n    },\r\n    {\r\n        _id: 4,\r\n        name: 'Sound 4',\r\n        fileName: 'electric_guitar_coutry_slide_120bpm-B.mp3',\r\n        iconName: 'electric-guitar',\r\n        isPlaying: false,\r\n    },\r\n    {\r\n        _id: 5,\r\n        name: 'Sound 5',\r\n        fileName: 'FUD_120_StompySlosh.mp3',\r\n        iconName: 'drum-set',\r\n        isPlaying: false,\r\n    },\r\n    {\r\n        _id: 6,\r\n        name: 'Sound 6',\r\n        fileName: 'GrooveB_120bpm_Tanggu.mp3',\r\n        iconName: 'bongo',\r\n        isPlaying: false,\r\n    },\r\n    {\r\n        _id: 7,\r\n        name: 'Sound 7',\r\n        fileName: 'MazePolitics_120_Perc.mp3',\r\n        iconName: 'dj',\r\n        isPlaying: false,\r\n    },\r\n    {\r\n        _id: 8,\r\n        name: 'Sound 8',\r\n        fileName: 'PAS3GROOVE1.03B.mp3',\r\n        iconName: 'conga',\r\n        isPlaying: false,\r\n    },\r\n    {\r\n        _id: 9,\r\n        name: 'Sound 9',\r\n        fileName: 'SilentStar_120_Em_OrganSynth.mp3',\r\n        iconName: 'saxophone',\r\n        isPlaying: false,\r\n    },\r\n]\r\n\r\nfunction getSounds() {\r\n    return sounds\r\n}\r\n\r\nexport const soundService = {\r\n    getSounds\r\n}","export const LOAD_SOUNDS = 'LOAD_SOUNDS';\r\nexport const QUEUE_SOUND = 'QUEUE_SOUND';\r\nexport const PLAY_SOUNDS_IN_QUEUE = 'PLAY_SOUNDS_IN_QUEUE';\r\nexport const TOGGLE_LOOP_PAUSE = 'TOGGLE_LOOP_PAUSE';\r\nexport const PLAY_ALL_SOUNDS = 'PLAY_ALL_SOUNDS';\r\nexport const STOP_ALL_SOUNDS = 'STOP_ALL_SOUNDS';\r\nexport const RESET_LOOPER = 'RESET_LOOPER';\r\n\r\nconst initialState = {\r\n    isLooperRunning: false, // Boolean for looper running state\r\n    sounds: [], // The array of sounds\r\n    queue: {}, // an object representing the queue, it's an object because it's more efficiant \r\n    // to check from the PadPreview component if the sound is in queue or not, instead for running in a loop on every render\r\n    activeSoundsCount: 0, // Counting how many sounds are active\r\n}\r\n\r\nexport const soundsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case LOAD_SOUNDS:\r\n            const { sounds } = action\r\n            return { ...state, sounds }\r\n        case QUEUE_SOUND:\r\n            const currentSound = state.sounds.find(sound => sound._id === action.soundId) // Get's the sound by the \r\n            // id recieved in the action\r\n            if (currentSound.isPlaying) { // If it's already playing, then make .isPlaying false\r\n                return {\r\n                    ...state,\r\n                    sounds: state.sounds.map(sound => {\r\n                        if (sound._id === action.soundId) sound.isPlaying = !sound.isPlaying\r\n                        return sound\r\n                    }),\r\n                    activeSoundsCount: state.activeSoundsCount - 1\r\n                }\r\n            } else if (!state.activeSoundsCount && !Object.keys(state.queue).length) { // if it's the first sound clicked on, \r\n                // then don't queue it, activate it instantly\r\n                return {\r\n                    ...state,\r\n                    sounds: state.sounds.map(sound => {\r\n                        if (sound._id === action.soundId) sound.isPlaying = !sound.isPlaying\r\n                        return sound\r\n                    }),\r\n                    activeSoundsCount: state.activeSoundsCount + 1\r\n                }\r\n            } else if (state.queue[action.soundId]) { // If it's already in queue, remove it\r\n                const queueCopy = Object.assign({}, state.queue)\r\n                delete queueCopy[action.soundId]\r\n                return { ...state, queue: queueCopy }\r\n            } else {\r\n                return { ...state, queue: { ...state.queue, [action.soundId]: 1 } }\r\n            }\r\n        case PLAY_SOUNDS_IN_QUEUE:\r\n            return {\r\n                ...state,\r\n                sounds: state.sounds.map(sound => {\r\n                    if (state.queue[sound._id]) sound.isPlaying = true\r\n                    return sound\r\n                }),\r\n                queue: {},\r\n                activeSoundsCount: state.activeSoundsCount + Object.keys(state.queue).length\r\n            }\r\n        case TOGGLE_LOOP_PAUSE:\r\n            return { ...state, isLooperRunning: !state.isLooperRunning }\r\n        case PLAY_ALL_SOUNDS:\r\n            return {\r\n                ...state, sounds: state.sounds.map(sound => {\r\n                    if (!sound.isPlaying) sound.isPlaying = true\r\n                    return sound\r\n                }),\r\n                queue: {},\r\n                activeSoundsCount: state.sounds.length\r\n            }\r\n        case STOP_ALL_SOUNDS:\r\n            return {\r\n                ...state, sounds: state.sounds.map(sound => {\r\n                    if (sound.isPlaying) sound.isPlaying = false\r\n                    return sound\r\n                })\r\n            }\r\n        case RESET_LOOPER:\r\n            return {\r\n                ...state,\r\n                sounds: state.sounds.map(sound => {\r\n                    if (sound.isPlaying) sound.isPlaying = false\r\n                    return sound\r\n                }),\r\n                queue: {},\r\n                activeSoundsCount: 0,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { soundService } from \"../../services/soundService\"\r\nimport {\r\n    LOAD_SOUNDS,\r\n    PLAY_ALL_SOUNDS,\r\n    STOP_ALL_SOUNDS,\r\n    QUEUE_SOUND,\r\n    PLAY_SOUNDS_IN_QUEUE,\r\n    TOGGLE_LOOP_PAUSE,\r\n    RESET_LOOPER\r\n} from \"../reducers/soundsReducer\"\r\n\r\nexport function loadSounds() {\r\n    const sounds = soundService.getSounds() // Getting the array of sounds from service\r\n    const action = {\r\n        type: LOAD_SOUNDS,\r\n        sounds\r\n    }\r\n    return action\r\n}\r\n\r\nexport function queueSound(soundId) {\r\n    const action = {\r\n        type: QUEUE_SOUND,\r\n        soundId\r\n    }\r\n    return action\r\n}\r\n\r\nexport function playSoundsInQueue() {\r\n    const action = {\r\n        type: PLAY_SOUNDS_IN_QUEUE\r\n    }\r\n    return action\r\n}\r\n\r\nexport function toggleLoopPause() {\r\n    const action = {\r\n        type: TOGGLE_LOOP_PAUSE\r\n    }\r\n    return action\r\n}\r\n\r\nexport function playAllSounds() {\r\n    const action = {\r\n        type: PLAY_ALL_SOUNDS\r\n    }\r\n    return action\r\n}\r\n\r\nexport function stopAllSounds() {\r\n    const action = {\r\n        type: STOP_ALL_SOUNDS\r\n    }\r\n    return action\r\n}\r\n\r\nexport function resetLooper() {\r\n    const action = {\r\n        type: RESET_LOOPER\r\n    }\r\n    return action\r\n}","import React, { useCallback, useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { queueSound, toggleLoopPause } from '../store/actions/soundsActions'\r\n\r\nexport const PadPreview = ({ sound, currentLoopTime }) => {\r\n\r\n    const dispatch = useDispatch() //Redux dispatch hook\r\n    const isLooperRunning = useSelector(state => state.soundsReducer.isLooperRunning) // Tells us if the looper is paused or not\r\n    const queue = useSelector(state => state.soundsReducer.queue) // A queue of all sounds that were clicked before the cycle ended\r\n    const activeSoundsCount = useSelector(state => state.soundsReducer.activeSoundsCount) // How many sounds are currently active\r\n    const [Icon, setIcon] = useState('') // A state for the icon element import\r\n\r\n    const audioRef = useRef(null) //Ref for the audio element\r\n\r\n    const initializeIcon = useCallback(async () => {//Importing the icon in useCallback to keep referance to function for efficiancy\r\n        const importedIcon = await import(`../assets/img/icons/${sound.iconName}.svg`);\r\n        setIcon(importedIcon.default);\r\n    }, [sound.iconName])\r\n\r\n    useEffect(() => { // initialize the pad (audio and icon)\r\n        const file = require(`../assets/sounds/${sound.fileName}`)\r\n        audioRef.current = new Audio(file.default)\r\n        audioRef.current.load()\r\n        audioRef.current.loop = true\r\n        initializeIcon()\r\n    }, [initializeIcon, sound.fileName]);\r\n\r\n    useEffect(() => {//Responsible for playing/pausing the audio based on the \"isPlaying\" state\r\n        if (sound.isPlaying && isLooperRunning) {\r\n            audioRef.current.play()\r\n        } else {\r\n            audioRef.current.pause()\r\n            audioRef.current.currentTime = 0\r\n        }\r\n    }, [sound.isPlaying, isLooperRunning])\r\n\r\n    useEffect(() => {//Making sure all sounds start and end together\r\n        if (currentLoopTime === 0) {\r\n            audioRef.current.currentTime = 0\r\n        }\r\n    }, [currentLoopTime])\r\n\r\n    const onQueueSound = () => {\r\n        if (!isLooperRunning) {//if the looper isn't running and are no active sounds, then activate it (first pad releases the pause basically)\r\n            if (activeSoundsCount === 0) dispatch(toggleLoopPause())\r\n            else return\r\n        }\r\n        dispatch(queueSound(sound._id)) // adds the clicked sound id to the queue object\r\n    }\r\n\r\n    const isPending = queue[sound._id]  // calculates if the sound is currently in queue\r\n\r\n    const pendingBarHeight = Math.floor(100 - currentLoopTime * 100 / 8000) // height for background bar representing how much time is left for next cycle\r\n\r\n    return (\r\n        <div\r\n            className={`pad-preview-wrapper ${isPending ? 'pending' : sound.isPlaying ? 'active' : ''} ${!isLooperRunning ? 'loop-is-paused' : ''}`}\r\n            onClick={onQueueSound}\r\n        >\r\n            {isPending && <div className=\"pending-bar\" style={{ height: `${pendingBarHeight}%` }}></div>}\r\n\r\n            <img src={Icon} alt=\"Pad icon\" />\r\n            <span></span>\r\n            <span></span>\r\n            <span></span>\r\n            <span></span>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { PadPreview } from './PadPreview'\r\n\r\nexport const PadsList = ({ sounds, currentLoopTime }) => {\r\n\r\n    //Just a list component that renders all pads\r\n\r\n    return (\r\n            <div className=\"pads-container\">\r\n                {sounds && sounds.map((sound) => {\r\n                    return <PadPreview\r\n                        key={sound._id}\r\n                        sound={sound}\r\n                        currentLoopTime={currentLoopTime}\r\n                    />\r\n                })}\r\n        </div>\r\n    )\r\n}\r\n","\r\nexport const utilService = {\r\n    makeId\r\n}\r\n\r\nfunction makeId(length = 8) {\r\n    let text = ''\r\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\r\n    for (var i = 0; i < length; i++) {\r\n        text += possible.charAt(Math.floor(Math.random() * possible.length))\r\n    }\r\n    return text\r\n}","import React, { useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Footer } from '../components/Footer'\r\nimport { Header } from '../components/Header'\r\nimport { PadsList } from '../components/PadsList'\r\nimport { utilService } from '../services/utilService'\r\nimport { saveRecording } from '../store/actions/recordingsActions'\r\nimport {\r\n    loadSounds,\r\n    playAllSounds,\r\n    playSoundsInQueue,\r\n    resetLooper,\r\n    toggleLoopPause\r\n} from '../store/actions/soundsActions'\r\n\r\nexport const LooperApp = () => {\r\n\r\n    const dispatch = useDispatch() //Redux dispatch hook\r\n\r\n    const sounds = useSelector(state => state.soundsReducer.sounds) //All of the sounds imported from the\r\n    // global state (Redux store)\r\n    const isLooperRunning = useSelector(state => state.soundsReducer.isLooperRunning) // Tells us if the looper\r\n    // is paused or not\r\n\r\n    const loopTimeIntervalRef = useRef(null) //Using ref for saving the looper time cycle interval id\r\n    // so it wont get lost on re-render\r\n\r\n    const [currentLoopTime, setCurrentLoopTime] = useState(0) //A timer state running from 0 to 8 seconds (in milliseconds)\r\n    const [isRecording, setIsRecording] = useState(false) //In recording mode or not\r\n    const [recordedSession, setRecordedSession] = useState([]) // A state that captures the recorded user actions\r\n\r\n    useEffect(() => {\r\n        dispatch(loadSounds()) // load all sounds to global state\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (isLooperRunning) {// If the looper is running, then set an interval that updates the \r\n            //current time on the currentLoopTime state\r\n            loopTimeIntervalRef.current = setInterval(() => {\r\n                setCurrentLoopTime((prevTime) => (prevTime + 10) % 8000)\r\n            }, 10);\r\n        } else {\r\n            clearInterval(loopTimeIntervalRef.current) // If looper is paused, then clear the interval\r\n        }\r\n        return () => clearInterval(loopTimeIntervalRef.current)// Clearing interval on component unmount\r\n    }, [isLooperRunning])\r\n\r\n    useEffect(() => {\r\n        if (currentLoopTime >= 7990) {\r\n            dispatch(playSoundsInQueue()) // When a cycle ends, read all sounds collected in the queue and set\r\n            // their .isPlaying to true\r\n\r\n            if (isRecording) {// In recording mode, push every sound that was played \r\n                //in the current cycle to the recordedSession state\r\n                const playedSounds = sounds.filter(sound => sound.isPlaying)\r\n                setRecordedSession(prev => [...prev, playedSounds])\r\n            }\r\n        }\r\n    }, [currentLoopTime, isRecording])\r\n\r\n    const onPlayAllSounds = () => { // Triggers all sounds at once\r\n        if (!isLooperRunning) dispatch(toggleLoopPause())\r\n        dispatch(playAllSounds())\r\n    }\r\n\r\n    const onToggleLoopPause = () => { // Toggles the IsLoopRunning state and stops the timer interval\r\n        clearInterval(loopTimeIntervalRef.current)\r\n        dispatch(toggleLoopPause())\r\n    }\r\n\r\n    const onResetAll = () => { //Reseting all of the sounds settings in global state\r\n        dispatch(resetLooper())\r\n    }\r\n\r\n    const onStopRecording = () => {\r\n        setIsRecording(false)\r\n        if (recordedSession.length) {//Only if actions were captured in state, then save the recording\r\n            // and clear the recorded session\r\n            dispatch(saveRecording({\r\n                _id: utilService.makeId(),\r\n                orderOfSounds: recordedSession\r\n            }))\r\n        }\r\n        setRecordedSession([])\r\n    }\r\n\r\n    return (\r\n        <div className=\"looper-app-wrapper flex column\">\r\n            <Header />\r\n            <PadsList\r\n                sounds={sounds}\r\n                currentLoopTime={currentLoopTime}\r\n            />\r\n            <Footer\r\n                onToggleLoopPause={onToggleLoopPause}\r\n                onResetAll={onResetAll}\r\n                onPlayAllSounds={onPlayAllSounds}\r\n                onStartRecording={() => setIsRecording(true)}\r\n                onStopRecording={onStopRecording}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import './assets/styles/main.scss';\nimport { LooperApp } from './pages/LooperApp';\n\nfunction App() {\n\n  return (\n    <div className=\"app\">\n      <LooperApp />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createStore, combineReducers } from 'redux'\r\nimport { recordingsReducer } from './reducers/recordingsReducer'\r\nimport { soundsReducer } from './reducers/soundsReducer'\r\n\r\nconst reducer = combineReducers({\r\n    soundsReducer,\r\n    recordingsReducer\r\n})\r\n\r\nexport const store = createStore(reducer)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport { store } from './store/store.js';\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}